// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	userpb "esl-challenge/api/gen/userpb"
)

// UserServiceClient is an autogenerated mock type for the UserServiceClient type
type UserServiceClient struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) CreateUser(ctx context.Context, in *userpb.RequestCreateUser, opts ...grpc.CallOption) (*userpb.ResponseCreateUser, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userpb.ResponseCreateUser
	if rf, ok := ret.Get(0).(func(context.Context, *userpb.RequestCreateUser, ...grpc.CallOption) *userpb.ResponseCreateUser); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userpb.ResponseCreateUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userpb.RequestCreateUser, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) DeleteUser(ctx context.Context, in *userpb.RequestDeleteUser, opts ...grpc.CallOption) (*userpb.ResponseDeleteUser, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userpb.ResponseDeleteUser
	if rf, ok := ret.Get(0).(func(context.Context, *userpb.RequestDeleteUser, ...grpc.CallOption) *userpb.ResponseDeleteUser); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userpb.ResponseDeleteUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userpb.RequestDeleteUser, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) ListUsers(ctx context.Context, in *userpb.RequestListUsers, opts ...grpc.CallOption) (*userpb.ResponseListUsers, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userpb.ResponseListUsers
	if rf, ok := ret.Get(0).(func(context.Context, *userpb.RequestListUsers, ...grpc.CallOption) *userpb.ResponseListUsers); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userpb.ResponseListUsers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userpb.RequestListUsers, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateUser(ctx context.Context, in *userpb.RequestUpdateUser, opts ...grpc.CallOption) (*userpb.ResponseUpdateUser, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userpb.ResponseUpdateUser
	if rf, ok := ret.Get(0).(func(context.Context, *userpb.RequestUpdateUser, ...grpc.CallOption) *userpb.ResponseUpdateUser); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userpb.ResponseUpdateUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userpb.RequestUpdateUser, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServiceClient creates a new instance of UserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceClient(t mockConstructorTestingTNewUserServiceClient) *UserServiceClient {
	mock := &UserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
